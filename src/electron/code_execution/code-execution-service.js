const vm = require('vm');

class VMCodeExecutionService {
  /**
   This function executes the specified code in a sandboxes environment and captures the output.
   It overrides console.log and console.Error to capture the output and returns a promise that resolves with the output.
   @param {string} code - The code to be executed.
   @returns {Promise} - A promise that resolves with an object containing the captured stdout, stderr, and exit code.
   */
  executeCode(code) {
    return new Promise((resolve, reject) => {
      const stdoutChunks = [];
      const stderrChunks = [];

      // Override console.log and console.error to capture the output
      const sandbox = {
        console: {
          log: (...args) => {
            const line = this._getExecutedFromLine(code);
            stdoutChunks.push({ line, response: args.join(' ') });
          },
          error: (...args) => {
            const line = this._getExecutedFromLine(code);
            stderrChunks.push({ line, response: args.join(' ') });
          },
        },
      };

      try {
        const context = vm.createContext(sandbox);
        vm.runInContext(code, context);
        const response = {
          stdout: stdoutChunks,
          stderr: stderrChunks,
          exitCode: 0,
        };
        resolve(response);
      } catch (error) {
        const response = {
          stdout: stdoutChunks,
          stderr: stderrChunks,
          exitCode: error.code || 1,
        };
        reject(response);
      }
    });
  }

  /**
   This function retrieves the line number where the specified code was executed.
   It uses the stack trace generated by throwing an Error object to extract the line number.
   @param {string} code - The code for which the executed line number needs to be determined.
   @returns {number} - The line number where the code was executed. Returns -1 if the line number could not be determined.
   */
  _getExecutedFromLine(code) {
    const stack = new Error().stack.split('\n');
    for (let i = 2; i < stack.length; i++) {
      const line = stack[i].trim();
      if (line.includes('evalmachine.<anonymous>:')) {
        const lineNumber = parseInt(line.match(/evalmachine.<anonymous>:([0-9]+)/)[1]);
        return lineNumber;
      }
    }
    return -1;
  }

}

module.exports = VMCodeExecutionService;
